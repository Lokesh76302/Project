#include <iostream>
#include <string>
#include <curl/curl.h>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <iomanip>
#include <sstream>

// Function to write received data to a string
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output) {
    size_t totalSize = size * nmemb;
    output->append(static_cast<char*>(contents), totalSize);
    return totalSize;
}

// Function to download content from a URL using libcurl
std::string downloadBook(const std::string& url) {
    CURL* curl = curl_easy_init();
    if (!curl) {
        throw std::runtime_error("Failed to initialize libcurl.");
    }

    std::string content;
    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);

    CURLcode res = curl_easy_perform(curl);

    curl_easy_cleanup(curl);

    if (res != CURLE_OK) {
        throw std::runtime_error("Failed to download the book.");
    }

    return content;
}

// Function to calculate SHA-256 hash
std::string calculateHash(const std::string& text) {
    EVP_MD_CTX* mdContext = EVP_MD_CTX_new();
    if (!mdContext) {
        throw std::runtime_error("Failed to create MD context.");
    }

    if (EVP_DigestInit_ex(mdContext, EVP_sha256(), nullptr) != 1) {
        EVP_MD_CTX_free(mdContext);
        throw std::runtime_error("Failed to initialize SHA-256 context.");
    }

    if (EVP_DigestUpdate(mdContext, text.c_str(), text.length()) != 1) {
        EVP_MD_CTX_free(mdContext);
        throw std::runtime_error("Failed to update SHA-256 context.");
    }

    unsigned char hash[EVP_MAX_MD_SIZE];
    unsigned int hashLength;
    if (EVP_DigestFinal_ex(mdContext, hash, &hashLength) != 1) {
        EVP_MD_CTX_free(mdContext);
        throw std::runtime_error("Failed to finalize SHA-256 hash.");
    }

    EVP_MD_CTX_free(mdContext);

    std::stringstream ss;
    for (unsigned int i = 0; i < hashLength; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);
    }

    return ss.str();
}

int main() {
    const std::string bookUrl = "https://quod.lib.umich.edu/cgi/r/rsv/rsv-idx?type=DIV1&byte=4697892";

    try {
        std::string bookText = downloadBook(bookUrl);
        std::string hash = calculateHash(bookText);

        std::cout << "SHA-256 Hash of the Book:\n" << hash << std::endl;
    } catch (const std::runtime_error& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1; // Return a non-zero value to indicate an error
    }

    return 0;
